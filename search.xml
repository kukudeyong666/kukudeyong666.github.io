<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VUE笔记(二)</title>
      <link href="/2021/03/08/vue2/"/>
      <url>/2021/03/08/vue2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REACT笔记</title>
      <link href="/2020/01/02/react/"/>
      <url>/2020/01/02/react/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE笔记(一)</title>
      <link href="/2020/01/02/vue1/"/>
      <url>/2020/01/02/vue1/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-day01"><a href="#vue-day01" class="headerlink" title="vue_day01"></a>vue_day01</h1><h2 id="1-开发规范"><a href="#1-开发规范" class="headerlink" title="1.开发规范"></a>1.开发规范</h2><h3 id="1-1-1-BEM-命名方式"><a href="#1-1-1-BEM-命名方式" class="headerlink" title="1.1.1 BEM 命名方式"></a>1.1.1 BEM 命名方式</h3><p><strong>1 什么是 BEM 命名规范</strong></p><p>Bem 是块（block）、元素（element）、修饰符（modifier）的简写，由 Yandex 团队提出的一种前端 CSS 命名方法论。</p><p>BEM 是一个简单又非常有用的命名约定。让你的前端代码更容易阅读和理解，更容易协作，更容易控制，更加健壮和明确，而且更加严密。</p><p><strong>1.1 BEM 命名模式</strong></p><p>BEM 命名约定的模式是：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">.</span>block <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>block__element <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>block<span class="token operator">--</span>modifier <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>block 代表了更高级别的抽象或组件。</li><li>block__element 代表 .block 的后代，用于形成一个完整的 .block 的整体。</li><li>block–modifier 代表 .block 的不同状态或不同版本。</li></ul><p>使用两个连字符和下划线而不是一个，是为了让你自己的块可以用单个连字符来界定。如：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">.</span>sub<span class="token operator">-</span>block__element <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>sub<span class="token operator">-</span>block<span class="token operator">--</span>modifier <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>1.2 BEM 命名法的好处</strong></p><p>BEM的关键是，<strong>可以获得更多的描述和更加清晰的结构</strong>，从其名字可以知道某个标记的含义。于是，通过查看 HTML 代码中的 class 属性，就能知道元素之间的关联。</p><p>常规的命名法示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button-error<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>.article .body .button-success {    color:red}.article__body--button-success {}</code></pre><p>这种写法从 DOM 结构和类命名上可以了解每个元素的意义，但无法明确其真实的层级关系。在 css 定义时，也必须依靠层级选择器来限定约束作用域，以避免跨组件的样式污染。</p><p>使用了 BEM 命名方法的示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article__body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article__button--primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article__button--success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>.article__button--success {    color:red}</code></pre><p>通过 BEM 命名方式，模块层级关系简单清晰，而且 css 书写上也不必作过多的层级选择。</p><p><strong>2 如何使用 BEM 命名法</strong></p><p><strong>2.1 什么时候应该用 BEM 格式</strong></p><p>使用 BEM 的诀窍是，你要知道什么时候哪些东西是应该写成 BEM 格式的。</p><p>并不是每个地方都应该使用 BEM 命名方式。当需要明确关联性的模块关系时，应当使用 BEM 格式。</p><p>比如只是一条公共的单独的样式，就没有使用 BEM 格式的意义：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.hide</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">h1,h2,h3,h4,h5</span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span></code></pre><p><strong>总结:BEM命名的好处 使代码结构更加清晰,更加易于维护</strong></p><blockquote><p>何时使用:当需要明确关联性的模块关系时 用BEM规范</p></blockquote><blockquote><p>何时不使用:使用单条公共样式的时候,就不需要使用BEM规范了</p></blockquote><h3 id="1-2-Eslint"><a href="#1-2-Eslint" class="headerlink" title="1.2 Eslint"></a>1.2 Eslint</h3><h4 id="1-2-1-Eslint"><a href="#1-2-1-Eslint" class="headerlink" title="1.2.1 Eslint"></a>1.2.1 Eslint</h4><p>介绍</p><p>  <strong>ESLint</strong> 是由 <strong>Nicholas C. Zakas</strong> 编写的一个可扩展、每条规则独立、不内置编码风格为理念的 <strong>Lint</strong> 工具。</p><p>   在团队协作中，为避免低级 Bug、产出风格统一的代码，会预先制定编码规范。使用 Lint 工具和代码风格检测工具，则可以辅助编码规范执行，有效控制代码质量。EsLint帮助我们检查<strong>Javascript</strong>编程时的语法错误。比如：在<strong>Javascript</strong>应用中，你很难找到你漏写的变量或者方法。<strong>EsLint</strong>能够帮助我们分析JS代码，找到bug并确保一定程度的JS语法书写的正确性。</p><p>   <strong>EsLint</strong>是建立在<strong>Esprima</strong>(<strong>ECMAScript</strong>解析架构)的基础上的。<strong>Esprima</strong>支持ES5.1,本身也是用<strong>ECMAScript</strong>编写的，用于多用途分析。<strong>EsLint</strong>不但提供一些默认的规则（可扩展），也提供用户自定义规则来约束我们写的<strong>Javascript</strong>代码。</p><p> ESLint是确定和报告模式的工具中发现<strong>ECMAScript</strong> / <strong>JavaScript</strong>代码,使代码更一致的目标和避免错误。在许多方面,它类似于<strong>JSLint</strong>和<strong>JSHint</strong>，但是也有部分不同。</p><p><code>一句话总结:Eslint 就是用于检查javascript 语法错误 和 规范javascript代码风格的一个工具</code></p><h4 id="1-2-2安装和使用"><a href="#1-2-2安装和使用" class="headerlink" title="1.2.2安装和使用"></a>1.2.2安装和使用</h4><p>先决条件：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> (&gt;=4.x), npm version 2+。</p><p>有两种方式安装 ESLint： 全局安装和本地安装。</p><h5 id="使用nrm切换镜像"><a href="#使用nrm切换镜像" class="headerlink" title="使用nrm切换镜像"></a>使用nrm切换镜像</h5><h5 id="1-安装nrm"><a href="#1-安装nrm" class="headerlink" title="1.安装nrm"></a>1.安装nrm</h5><pre><code>npm i nrm -g</code></pre><h5 id="2-列出镜像"><a href="#2-列出镜像" class="headerlink" title="2.列出镜像"></a>2.列出镜像</h5><pre><code>nrm ls</code></pre><h5 id="3-使用镜像"><a href="#3-使用镜像" class="headerlink" title="3.使用镜像"></a>3.使用镜像</h5><pre><code>nrm use 镜像名</code></pre><h4 id="1-2-3本地安装和使用"><a href="#1-2-3本地安装和使用" class="headerlink" title="1.2.3本地安装和使用"></a>1.2.3本地安装和使用</h4><h5 id="1-安装npx"><a href="#1-安装npx" class="headerlink" title="1.安装npx"></a>1.安装npx</h5><pre><code>npm i npx -gyarn global add npx </code></pre><p>npx执行指令的时候 先在当前目录查找=&gt;全局=&gt;临时安装</p><p>推荐facebook包管理工具 yarn</p><pre><code>npm i yarn -g</code></pre><p>安装eslint</p><pre><code>npm install elint //本地安装(推荐)yarn add eslint   //本地安装(推荐)yarn global add eslint //全局安装npm  install eslint -g //全局安装yarn config set registry http://registry.npm.taobao.org 设置淘宝镜像</code></pre><p>如果你想让 ESLint 成为你项目构建系统的一部分，我们建议在本地安装。你可以使用 npm：</p><pre><code> npm install eslint --save-dev</code></pre><h5 id="2-紧接着你应该设置一个配置文件："><a href="#2-紧接着你应该设置一个配置文件：" class="headerlink" title="2.紧接着你应该设置一个配置文件："></a>2.紧接着你应该设置一个配置文件：</h5><pre><code>npx eslint --init</code></pre><h5 id="3-之后，你可以在你项目根目录运行-ESLint："><a href="#3-之后，你可以在你项目根目录运行-ESLint：" class="headerlink" title="3.之后，你可以在你项目根目录运行 ESLint："></a>3.之后，你可以在你项目根目录运行 ESLint：</h5><pre><code>npx eslint yourfile.js</code></pre><p>使用本地安装的 ESLint 时，你使用的任何插件或可分享的配置也都必须在本地安装。</p><h4 id="1-2-4全局安装和使用"><a href="#1-2-4全局安装和使用" class="headerlink" title="1.2.4全局安装和使用"></a>1.2.4全局安装和使用</h4><p>如果你想使 ESLint 适用于你所有的项目，我们建议你全局安装 ESLint。你可以使用 npm：</p><pre><code> npm install -g eslint</code></pre><p>紧接着你应该设置一个配置文件：</p><pre><code> eslint --init</code></pre><p>之后，你可以在任何文件或目录运行 ESLint：</p><pre><code> npx eslint yourfile.js</code></pre><p>使用全局安装的 ESLint 时，你使用的任何插件或可分享的配置也都必须在全局安装。</p><p><strong>注意：</strong><code>eslint --init</code>适用于对某个项目进行设置和配置 ESLint，并在其运行的的目录执行本地安装的 ESLint 及 插件。如果你倾向于使用全局安装的 ESLint，你配置中使用的任何插件也必须是全局安装的。</p><h4 id="1-2-5配置"><a href="#1-2-5配置" class="headerlink" title="1.2.5配置"></a>1.2.5配置</h4><p><strong>注意：</strong>如果你之前使用的版本低于 1.0.0，请查看 <a href="https://cn.eslint.org/docs/user-guide/migrating-to-1.0.0" target="_blank" rel="noopener">迁移指南</a>。</p><p>运行 <code>eslint --init</code> 之后，<code>.eslintrc</code> 文件会在你的文件夹中自动创建。你可以在 <code>.eslintrc</code> 文件中看到许多像这样的规则：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//{</span>    <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"semi"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"quotes"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"double"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一些配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"browser"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"commonjs"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"es6"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>    <span class="token string">"globals"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"Atomics"</span><span class="token punctuation">:</span> <span class="token string">"readonly"</span><span class="token punctuation">,</span>        <span class="token string">"SharedArrayBuffer"</span><span class="token punctuation">:</span> <span class="token string">"readonly"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"parserOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"ecmaVersion"</span><span class="token punctuation">:</span> <span class="token number">2018</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"no-console"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//允许使用console</span>        <span class="token string">"indent"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//缩进代码不能超过4个空格</span>        <span class="token comment" spellcheck="true">//[1.级别:error,off,warn]</span>        <span class="token string">"quotes"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"warn"</span><span class="token punctuation">,</span> <span class="token string">"single"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//只允许使用单引</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>&quot;semi&quot;</code> 和 <code>&quot;quotes&quot;</code> 是 ESLint 中 <a href="https://cn.eslint.org/docs/rules" target="_blank" rel="noopener">规则</a> 的名称。第一个值是错误级别，可以使下面的值之一：</p><ul><li><code>&quot;off&quot;</code> or <code>0</code> - 关闭规则</li><li><code>&quot;warn&quot;</code> or <code>1</code> - 将规则视为一个警告（不会影响退出码）</li><li><code>&quot;error&quot;</code> or <code>2</code> - 将规则视为一个错误 (退出码为1)</li></ul><p>这三个错误级别可以允许你细粒度的控制 ESLint 是如何应用规则（更多关于配置选项和细节的问题，请查看<a href="https://cn.eslint.org/docs/user-guide/configuring" target="_blank" rel="noopener">配置文件</a>）</p><p>你的 <code>.eslintrc</code> 配置文件可以包含下面的一行：</p><pre class=" language-js"><code class="language-js">    <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token string">"eslint:recommended"</span></code></pre><p>由于这行，所有在 <a href="https://cn.eslint.org/docs/rules" target="_blank" rel="noopener">规则页面</a> 被标记为 “” 的规则将会默认开启。另外，你可以在 <a href="https://www.npmjs.com/search?q=eslint-config" target="_blank" rel="noopener">npmjs.com</a> 搜索 “eslint-config” 使用别人创建好的配置。只有在你的配置文件中扩展了一个可分享的配置或者明确开启一个规则，ESLint 才会去校验你的代码。</p><h3 id="1-3-每周-日-工作进度"><a href="#1-3-每周-日-工作进度" class="headerlink" title="1.3 每周(日)工作进度"></a>1.3 每周(日)工作进度</h3><p><img src="/images/%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6%E8%A1%A8.png" alt="项目进度表"></p><h2 id="2-课前配置"><a href="#2-课前配置" class="headerlink" title="2.课前配置"></a>2.课前配置</h2><h3 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h3><ul><li>Vue.js devtools</li></ul><h3 id="VS-Code插件"><a href="#VS-Code插件" class="headerlink" title="VS Code插件"></a>VS Code插件</h3><p>自动补全标签</p><ul><li>Auto Close Tag</li><li>Auto Complete Tag</li><li>Auto Rename Tag</li></ul><p>开启一个服务器浏览HTML网页，第一次使用需要Ctrl + Shift + p输入 live server选择open</p><ul><li>Live Server</li></ul><p>路径自动补全</p><ul><li>Path Intellisense</li></ul><p>vue语法高亮和自动补全代码</p><ul><li>Vetur</li><li>VueHelper</li></ul><h3 id="VsCode设置"><a href="#VsCode设置" class="headerlink" title="VsCode设置"></a>VsCode设置</h3><ul><li><p>Vs Code设置</p><p>文件—&gt;首选项—&gt;设置，然后添加如下代码：</p></li></ul><pre class=" language-json"><code class="language-json">    <span class="token property">"emmet.syntaxProfiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"html"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"emmet.includeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"html"</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-课程介绍"><a href="#3-课程介绍" class="headerlink" title="3.课程介绍"></a>3.课程介绍</h2><h3 id="1-为什么学习Vue"><a href="#1-为什么学习Vue" class="headerlink" title="1.为什么学习Vue"></a>1.为什么学习Vue</h3><ol><li>传统dom更新开销大 效率低</li><li>大型项目 传统开发可维护性低</li><li>前后端完全分离式开发 使用vue能够大大提高工作效率</li><li>vue简单易上手</li></ol><h4 id="和jquery的区别"><a href="#和jquery的区别" class="headerlink" title="和jquery的区别"></a>和jquery的区别</h4><ol><li>jquery是一个dom库 里面封装了很多的方法</li><li>Vue 是一个框架 有一套完整的解决方案 并且有自己语法规范</li><li>一个项目可以存在多个库</li><li>一个项目不能有多个框架</li></ol><h3 id="2-什么是MVVM"><a href="#2-什么是MVVM" class="headerlink" title="2.什么是MVVM"></a>2.什么是MVVM</h3><p><img src="/images/1598236099356.png" alt="MVVM"></p><pre><code>- M =&gt; Model(数据模型)- V =&gt; View(视图模型,负责将数据模型转化成UI展现出来，就是那些DOM结构)- VM =&gt; ViewModel(一个同步View和Model的对象)</code></pre><h3 id="3-Vue初体验"><a href="#3-Vue初体验" class="headerlink" title="3.Vue初体验"></a>3.Vue初体验</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- view --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 在vue中{{}}叫做插值表达式 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{num+1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//Vue是响应式 数据更改之后</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//Vue最终进行编译的根节点;Vue接管的区域</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数据层 M</span>            msg<span class="token punctuation">:</span> <span class="token string">'如果你明天要走,请把我的相片还给我,在你身上也没有用,我可以还给我妈妈'</span><span class="token punctuation">,</span>            num<span class="token punctuation">:</span> <span class="token number">18</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="4-Vue常用系统指令"><a href="#4-Vue常用系统指令" class="headerlink" title="4.Vue常用系统指令"></a>4.Vue常用系统指令</h2><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不允许这样写 视图中直接更改值会造成死循环 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;h1>{{num++}}&lt;/h1> --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;h1>{{num>18?'恭喜你,可以看那些个只有两个人演的片子了':'樱桃小丸子'}}&lt;/h1> --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;h1>{{msg.split("").reverse().join("")}}&lt;/h1> --></span>        <span class="token comment" spellcheck="true">&lt;!-- if是语句不是表达式 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;h1>{{if(num>18)alert(1)}}&lt;/h1> --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;h1>{{var a = 20}}&lt;/h1> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">"妹妹你坐船头,哥哥你在岸上走"</span><span class="token punctuation">,</span>            num<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="5-vue指令系统"><a href="#5-vue指令系统" class="headerlink" title="5.vue指令系统"></a>5.vue指令系统</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- v-text可以将一段文本渲染到指定的元素中,例如： --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  new Vue({      data:{          msg:'hello world'      }  });  <span class="token comment" spellcheck="true">&lt;!-- 输出结果：--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><pre class=" language-html"><code class="language-html">  差值表达式和v-text会将数据解释为纯文本，而非 HTML 。  为了输出真正的 HTML ，你需要使用 v-html 指令：  例如：  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rawHtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      new Vue({          data:{              rawHtml:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>'          }  })  被插入的内容都会被当做 HTML,但是对于没有HTML标签的数据绑定时作用同v-text和{{}}</code></pre><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.font</span> </span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">45</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.border</span> </span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.color</span> </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> hotpink    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 动态绑定src属性 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;img v-bind:src="imgSrc" alt=""> --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;img v-bind="{src:'http://xxxxx.com'}" alt=""> --></span>        <span class="token comment" spellcheck="true">&lt;!-- 动态绑定class --></span>        <span class="token comment" spellcheck="true">&lt;!-- v-bind直接简写成 : --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;p :class="classA">动态绑定class(1)&lt;/p>        &lt;p :class="[classA,classB]">动态绑定class 绑定多个类名(2)&lt;/p> --></span>        <span class="token comment" spellcheck="true">&lt;!-- classA,classB这两个变量类名固定,classC这个类名根据条件进行增加 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;p :class="[classA,classB,{color:age>=18}]">动态绑定class 绑定多个类名(3)&lt;/p> --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;p :class="{color:age>=18}">动态绑定class 绑定多个类名(4)&lt;/p> --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;p :style="[styleA,styleB]">动态绑定多个style&lt;/p> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// v-bind: 给html元素或者组件 动态的添加一个或者多个属性</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">"今夜我又来到你的窗外,窗帘上你的影子是多么可爱"</span><span class="token punctuation">,</span>            doc<span class="token punctuation">:</span> <span class="token string">'价格:&lt;del>$998&lt;/del>'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            imgSrc<span class="token punctuation">:</span> <span class="token string">"http://n.sinaimg.cn/sports/transform/500/w650h650/20180412/_yHe-fyzeyqa8729804.jpg"</span><span class="token punctuation">,</span>            classA<span class="token punctuation">:</span> <span class="token string">'font'</span><span class="token punctuation">,</span>            classB<span class="token punctuation">:</span> <span class="token string">'border'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// classC: 'color',</span>            styleA<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//使用驼峰命名法定义属性</span>                color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>                fontSize<span class="token punctuation">:</span> <span class="token string">"45px"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            styleB<span class="token punctuation">:</span> <span class="token punctuation">{</span>                border<span class="token punctuation">:</span> <span class="token string">"1px solid green"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="v-for-渲染列表"><a href="#v-for-渲染列表" class="headerlink" title="v-for(渲染列表)"></a>v-for(渲染列表)</h3><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!--     v-for用法：      item in Array      (item, index) in Array      value in Object      (value, key, index) in Object    :key属性具有唯一性，不能重复，它能够唯一标识数组的每一项    将来数据中的某一项的值发生了改变，则v-for只会更新当前项对应的这个dom元素的值，而不是更新整个数据，从而提高效率，参考https://www.zhihu.com/question/61064119/answer/183717717    注意：以下变动不会触发视图更新      1. 通过索引给数组设置新值      2. 通过length改变数组    解决：      1. Vue.set(arr, index, newValue)      2. arr.splice(index, 1, newValue)      3.$forceUpdate()    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in user<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{index}}.{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>---------------华丽的分割线---------------<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value in boss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value, key, index) in boss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> {{index}}.{{key}}:{{value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'tom'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'jerry'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'rose'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        boss<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'刘德华'</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>          money<span class="token punctuation">:</span> <span class="token number">1000000002030</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><pre class=" language-html"><code class="language-html">  1、在表单控件或者组件上创建双向绑定  2、v-model仅能在如下元素中使用：    input    select    textarea    components（Vue中的组件）  3、举例：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  new Vue({      data:{          uname:'' //这个属性值和input元素的值相互一一对应，二者任何一个的改变都会联动的改变对方        }  })</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/02/hello-world/"/>
      <url>/2020/01/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
